{
  "name": "keypather",
  "version": "1.7.5",
  "description": "Get or set a object values from a keypath string. Supports bracket notation, dot notation, and functions",
  "main": "index.js",
  "scripts": {
    "test-watch": "nodemon --delay 1 -w *.js -w lib -w test -w configs -x npm test",
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tjmehta/value-for-keypath.git"
  },
  "keywords": [
    "keypath",
    "value",
    "traversal",
    "dot",
    "notation",
    "bracket",
    "notation",
    "function",
    "path",
    "array",
    "object",
    "dot",
    "notation",
    "node",
    "module",
    "key",
    "keys",
    "string"
  ],
  "author": {
    "name": "Tejesh Mehta"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/tjmehta/value-for-keypath/issues"
  },
  "homepage": "https://github.com/tjmehta/value-for-keypath",
  "dependencies": {},
  "devDependencies": {
    "should": "~3.1.2",
    "mocha": "~1.17.1",
    "nodemon": "~1.0.20"
  },
  "readme": "# keypather [![Build Status](https://travis-ci.org/tjmehta/keypather.png?branch=master)](https://travis-ci.org/tjmehta/keypather)\n\nGet or set a object values from a keypath string. Supports bracket notation, dot notation, and functions\n\n# installation\n```bash\nnpm install keypather\n```\n\n# Examples\n\n## GET\n\ndot notation, bracket notation, and functions (even with arguments) all supported:\n\n```js\nvar keypath = require('keypather')();\nvar obj = {\n  foo: {\n    bar: {\n      baz: 'val'\n    }\n  }\n};\nkeypath.get(obj, \"foo.bar.baz\"); // val\nkeypath.get(obj, \"['foo']['bar']['baz']\"); // val\n```\n\n```js\nvar keypath = require('keypather')();\nvar obj = {\n  foo: function () {\n    return function () {\n      return function () {\n        return 'val';\n      };\n    };\n  }\n};\nkeypath.get(obj, \"foo()()()\"); // val\n```\n\n```js\nvar keypath = require('keypather')();\nvar obj = {\n  foo: function () {\n    return {\n      bar: {\n        baz: 'val'\n      }\n    };\n  }\n};\nkeypath.get(obj, \"foo()['bar'].baz\"); // val\n```\nfunctions with arguments\n```js\nvar keypath = require('keypather')();\nvar obj = {\n  create: function (data) {\n    var data = data;\n    return {\n      get: function (key) {\n        return data[key];\n      }\n    };\n  }\n};\nkeypath.get(obj, \"create(%).get(%)\", [{foo:1, bar:2}], ['foo']); // 1\nkeypath.get(obj, \"create(%).get(%)\", {foo:1, bar:2}, 'foo'); // 1, single args are automatically placed in arrays\n// technically you can use anything (except dots, parens, brackets, or empty string)\n// between the parens of functions that accept args (in place of %)\n```\n\nGet returns null for keypaths that do not exist by default,\nbut can also throw errors with `{ force: false }`\n\n```js\nvar keypath = require('keypather')(); // equivalent to { force:true }\nvar obj = {};\nkeypath.get(obj, \"foo.bar.baz\"); // null\n\nvar keypath = require('keypather')( force: false );\nvar obj = {};\nkeypath.get(obj, \"foo.bar.baz\");\n// throw's an error\n// Error: Cannot get 'foo' of undefined\n```\n\n## SET\n\nmixed notation, dot notation, and bracket notation all supported:\n\n```js\nvar keypath = require('keypather')();\nvar obj = {\n  foo: {\n      bar: {\n        baz: 'val'\n      }\n    }\n  }\n};\nkeypath.set(obj, \"foo['bar'].baz\", 'value'); // value\nkeypath.set(obj, \"foo.bar.baz\", 'value'); // value\nkeypath.set(obj, \"['foo']['bar']['baz']\", 'value'); // value\n```\n\n Set forces creation by default:\n\n```js\nvar keypath = require('keypather')(); // equivalent to { force:true }\nvar obj = {};\nkeypath.set(obj, \"foo.bar.baz\", 'val'); // value\n// obj = {\n//   foo: {\n//     bar: {\n//       baz: 'val'\n//     }\n//   }\n// };\n\nvar keypath = require('keypather')( force: false );\nvar obj = {};\nkeypath.set(obj, \"foo.bar.baz\", 'val');\n// throw's an error\n// Error: Cannot get 'foo' of undefined\n```\n\n## IN\n\nEquivalent to `key in obj`\n\n```js\nvar keypath = require('keypather')();\nvar obj = {\n  foo: {\n      bar: {\n        baz: 'val'\n      }\n    }\n  }\n};\nkeypath.in(obj, \"foo['bar'].baz\");        // true\nkeypath.in(obj, \"foo.bar.baz\");           // true\nkeypath.in(obj, \"['foo']['bar']['baz']\"); // true\n// obj:\n// {\n//   foo: {\n//     bar: {}\n//   }\n// }\n\n```\n\n## HAS\n\nEquivalent to `obj.hasOwnProperty`\n\n```js\nvar keypath = require('keypather')();\nvar obj = {\n  foo: {\n      bar: {\n        baz: 'val'\n      }\n    }\n  }\n};\nkeypath.has(obj, \"foo['bar'].baz\");        // true\nkeypath.has(obj, \"foo.bar.baz\");           // true\nkeypath.has(obj, \"['foo']['bar']['baz']\"); // true\n// obj:\n// {\n//   foo: {\n//     bar: {}\n//   }\n// }\n\n```\n\n## DEL\n\nEquivalent to `delete obj.key`\n\n```js\nvar keypath = require('keypather')();\nvar obj = {\n  foo: {\n      bar: {\n        baz: 'val'\n      }\n    }\n  }\n};\nkeypath.del(obj, \"foo['bar'].baz\");        // true\nkeypath.del(obj, \"foo.bar.baz\");           // true\nkeypath.del(obj, \"['foo']['bar']['baz']\"); // true\n// obj:\n// {\n//   foo: {\n//     bar: {}\n//   }\n// }\n\n```\n\n# License\n### MIT",
  "readmeFilename": "README.md",
  "_id": "keypather@1.7.5",
  "dist": {
    "shasum": "964528a7bbdf3ccf9e16fffa2e3d1e49dc2d7a35"
  },
  "_from": "keypather@^1.3.2",
  "_resolved": "https://registry.npmjs.org/keypather/-/keypather-1.7.5.tgz"
}
