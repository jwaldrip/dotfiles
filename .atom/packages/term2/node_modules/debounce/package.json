{
  "name": "debounce",
  "description": "fn debounce",
  "version": "0.0.3",
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "component": {
    "scripts": {
      "debounce/index.js": "index.js"
    }
  },
  "readme": "\n# debounce\n\n  Useful for implementing behavior that should only happen after a repeated action has completed.\n\n## Installation\n\n    $ component install component/debounce\n\n  Or in node:\n\n    $ npm install debounce\n\n## Example\n\n```js\nvar debounce = require('debounce');\nwindow.onresize = debounce(resize, 200);\n\nfunction resize(e) {\n  console.log('height', window.innerHeight);\n  console.log('width', window.innerWidth);\n}\n```\n\n## API\n\n### debounce(fn, wait, [ immediate || false ])\n\n  Creates and returns a new debounced version of the passed function that will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked.\n\n  Pass `true` for the `immediate` parameter to cause debounce to trigger the function on the leading edge instead of the trailing edge of the wait interval. Useful in circumstances like preventing accidental double-clicks on a \"submit\" button from firing a second time.\n\n## License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "_id": "debounce@0.0.3",
  "dist": {
    "shasum": "4241a7fbfce811a94a178069e5e250bf8b75c886"
  },
  "_from": "debounce@0.0.3",
  "_resolved": "https://registry.npmjs.org/debounce/-/debounce-0.0.3.tgz"
}
