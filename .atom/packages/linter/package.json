{
  "name": "linter",
  "main": "./lib/init",
  "version": "0.7.3",
  "private": true,
  "description": "Validates your code using linters.",
  "repository": {
    "type": "git",
    "url": "https://github.com/AtomLinter/Linter.git"
  },
  "license": "MIT",
  "engines": {
    "atom": ">=0.125.0",
    "node": ">= 0.10.0"
  },
  "dependencies": {
    "chai": "^1.9.1",
    "emissary": "^1.0.0",
    "jshint": "^2.4.4",
    "lodash": "^2.4.1",
    "rimraf": "^2.2.8",
    "shelljs": "^0.2.6",
    "sinon": "^1.10.0",
    "temp": "~0.8.0",
    "xregexp": "2.0.0"
  },
  "devDependencies": {
    "biscotto": "^2.1.1",
    "grunt": "^0.4.5",
    "grunt-coffeelint": "^0.0.10",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-coffee": "^0.10.1",
    "grunt-contrib-connect": "^0.7.1",
    "grunt-contrib-watch": "^0.5.3",
    "grunt-exec": "^0.4.5",
    "grunt-gh-pages": "^0.9.1",
    "grunt-lesslint": "^1.1.3",
    "grunt-lintspaces": "^0.5.1",
    "load-grunt-tasks": "^0.4.0",
    "pygments": "^0.2.0"
  },
  "readme": "# Linter\n[![Build Status](https://travis-ci.org/AtomLinter/Linter.svg)](https://travis-ci.org/AtomLinter/Linter)\n\nLint your code with ease in [Atom](http://atom.io).\n\n![atom-inline-messages](inline-comments.gif)\n\nThe idea is to stop the linter plugins war, by providing a top level API for linters to parse and display errors in the Atom editor.\n\n## Available linters\n- [linter-php](https://atom.io/packages/linter-php), for PHP using `php -l`\n- [linter-phpcs](https://atom.io/packages/linter-phpcs), for PHP, using `phpc`\n- [linter-phpmd](https://atom.io/packages/linter-phpmd), for PHP, using `phpmd`\n- [linter-pylint](https://atom.io/packages/linter-pylint), for Python, using `pylint`\n- [linter-pyflakes](https://atom.io/packages/linter-pyflakes), for Python, using `pyflakes`\n- [linter-pep8](https://atom.io/packages/linter-pep8), for Python, using `pep8`.\n- [linter-flake8](https://atom.io/packages/linter-flake8), for Python, using `flake8`\n- [linter-pylama](https://atom.io/packages/linter-pylama), for Python, using `pylama`\n- [linter-javac](https://atom.io/packages/linter-javac), for Java, using `javac`\n- [linter-jshint](https://atom.io/packages/linter-jshint), for JavaScript and JSON, using `jshint`\n- [linter-jscs](https://atom.io/packages/linter-jscs), for JavaScript, using `jscs`\n- [linter-jsxhint](https://atom.io/packages/linter-jsxhint), for JSX (React.js), using `jsxhint`\n- [linter-eslint](https://atom.io/packages/linter-eslint), for JavaScript, using `eslint`\n- [linter-scss-lint](https://atom.io/packages/linter-scss-lint), for SASS/SCSS, using `scss-lint`\n- [linter-less](https://atom.io/packages/linter-less), for LESS, using `less`\n- [linter-coffeelint](https://atom.io/packages/linter-coffeelint), for CoffeeScript, using `coffeelint`\n- [linter-csslint](https://atom.io/packages/linter-csslint), for CSS, using `csslint`\n- [linter-rubocop](https://atom.io/packages/linter-rubocop), for Ruby and Ruby on Rails, using `rubocop`\n- [linter-tslint](https://atom.io/packages/linter-tslint), for Typescript, using `tslint`\n- [linter-xmllint](https://atom.io/packages/linter-xmllint), for XML, using `xmllint`\n- [linter-shellcheck](https://atom.io/packages/linter-shellcheck), for Bash, using `shellcheck`\n- [linter-scalac](https://atom.io/packages/linter-scalac), for Scala, using `scalac`\n- [linter-clang](https://atom.io/packages/linter-clang), for C / C++, using `clang`\n- [linter-cpplint](https://atom.io/packages/linter-cpplint), for C++, using `cpplint`\n- [linter-ruby](https://atom.io/packages/linter-ruby), for Ruby, using `ruby -wc`\n- [linter-lua](https://atom.io/packages/linter-lua), for Lua, using `luac -p`\n- [linter-clojure](https://atom.io/packages/linter-clojure), for Clojure, using `clojure`\n- [linter-puppet-lint](https://atom.io/packages/linter-puppet-lint), for Puppet, using `puppet-lint`\n- [linter-js-yaml](https://atom.io/packages/linter-js-yaml), for Yaml, using `js-yaml`\n- [linter-erb](https://atom.io/packages/linter-erb), for .erb files, using `erb -x`\n- [linter-hlint](https://atom.io/packages/linter-hlint), for Haskell files, using `hlint`\n- [linter-tidy](https://atom.io/packages/linter-tidy), for HTML, using `tidy`\n- [linter-htmlhint](https://atom.io/packages/linter-htmlhint), for html, using `htmlhint`\n- [linter-squirrel](https://atom.io/packages/linter-squirrel), for squirrel, using `squirrel-compiler`\n- [linter-codscriptizer](https://atom.io/packages/linter-codscriptizer), for CoDScript, using `codscriptizer -l`\n- [linter-harbour](https://atom.io/packages/linter-harbour), for Harbour, using `harbour`\n- [linter-rust](https://atom.io/packages/linter-rust), for Rust, using `rustc`\n- [linter-dartanalyzer](https://atom.io/packages/linter-dartanalyzer), for Dart using `dartanalyzer`\n\n\n## Features\n\n* **Lint on edit** – Instant error reporting for you! (And it's fast!)\n* **Modular** – You install only the linters you need.\n* **Active** – New linters are out every week.\n\n## Installation\n\n1. `$ apm install linter` – Install the main package.\n2. `$ apm install linter-jshint` – Install the linter you need, here `jshint`.\n\n## Configuration\n\n* **Lint on save** [On / Off] - Lint the file when you save it\n* **Lint on change** [On / Off] - Lint the file as you type\n* **Show highlighting** [On / Off] - Highlight the range of wrong code\n* **Show gutters**: [On / Off] - Show dot in the gutter on line error\n* **Show messages around cursor** [On / Off] - Show error description in the status bar\n* **Show status bar when cursor is in error range** [On / Off] - Either show status bar when the cursor is on the error line, or show it when the cursor is focus the range of wrong code\n* **Show error inline** [On / Off] - Shows the error or warning message next to the code as opposed to in the status bar.\n* **Lint on change interval** [in ms] - Interval between two lints while you are writing code\n\n## Common errors\n\n* `env: node: No such file or directory` – There's a problem with your node path – [check this](http://stackoverflow.com/a/20077620).\n* `spawn ENOENT` or `spawn ENOTDIR` - A linter can't find a path to the executable. Try starting Atom from a shell via `atom` to make sure it gets your `PATH`. See also [#102](https://github.com/AtomLinter/Linter/issues/102), [#150](https://github.com/AtomLinter/Linter/issues/150).\n* Gutters and highlights not working? Make sure you're using the React editor. The [old editor is deprecated](http://blog.atom.io/2014/07/22/default-to-react-editor.html).\n\n## Documentation\nhttp://atomlinter.github.io/Linter/\n\n## Coming soon\n\n- linter-pep257, for python, using `pep257`.\n- linter-rst, for reStructuredText, using `docutils`.\n- linter-phplint, for PHP, using `phplint`.\n- linter-jsl, for JavaScript, using `jsl`.\n- linter-oclitnt, for C / C++ / Objective-C, using `OCLint`.\n\n## Contributing\n\nIf you're going to submit a pull request, please try to follow\n[the official contribution guidelines of Atom](https://atom.io/docs/latest/contributing).\n\nYou need `nodejs` and `grunt-cli` installed before contributing.\nRun `bower install node` then `npm install -g grunt-cli`.\n\nAlso, run `$ grunt dev` before any submission and while developing, it will achieves severals tasks:\n\n* Compile and lint the CoffeeScript files\n* Lint the stylesheets\n* Lint any trailing spaces and ensure new line at end of file\n\nYou can generate the doc with `$ grunt doc`, it will open in your default browser.\n\n## Donation\n[![Share the love!](https://chewbacco-stuff.s3.amazonaws.com/donate.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=KXUYS4ARNHCN8)\n[![donate-paypal](https://s3-eu-west-1.amazonaws.com/chewbacco-stuff/donate-paypal.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=KXUYS4ARNHCN8)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/AtomLinter/Linter/issues"
  },
  "homepage": "https://github.com/AtomLinter/Linter",
  "_id": "linter@0.7.3",
  "dist": {
    "shasum": "f25dcfbf6ce32f541f02f4875cc0ec560395eb84"
  },
  "_resolved": "/private/var/folders/r2/8wz692wn38115859g50vb3t00000gn/T/d-114827-10923-185k01d/package.tgz",
  "_from": "/private/var/folders/r2/8wz692wn38115859g50vb3t00000gn/T/d-114827-10923-185k01d/package.tgz"
}
