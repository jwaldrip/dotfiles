[core]
	excludesfile = /Users/jwaldrip/.gitignore_global
	ignorecase = false
	editor = vim
[user]
	email = jason@waldrip.net
	name = jwaldrip
	signingkey = 22A5D30F
[push]
	default = current
[git-up "fetch"]
	all = true
[alias]
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	le = log --oneline --decorate
	filelog = log -u
	fl = log -u
	dl = "!git ll -1"
	dlc = diff --cached HEAD^
	dr  = "!f() { git diff "$1"^.."$1"; }; f"
	lc  = "!f() { git ll "$1"^.."$1"; }; f"
	diffr  = "!f() { git diff "$1"^.."$1"; }; f"
	f = "!git ls-files | grep -i"
	grep = grep -Ii
	gr = grep -Ii
	tr = "!git branch --set-upstream-to=origin/`git rev-parse --abbrev-ref HEAD` `git rev-parse --abbrev-ref HEAD`"
	trr = "!f() { git branch --set-upstream-to=\"$1\" `git rev-parse --abbrev-ref HEAD` ; } ; f"
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
	la = "!git config -l | grep alias | cut -c 7-"
	done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
	lasttag = describe --tags --abbrev=0
	youngest = for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:short) | %(refname:short) [%(authorname)]'
	oldest = for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) | %(refname:short) [%(authorname)]'
	recent = for-each-ref --sort=-committerdate --count=15 --format='%(refname:short)' refs/heads/
        lt = describe --tags --abbrev=0
	cp = cherry-pick
	st = status -s
	msg = commit --allow-empty -m
	cl = clone
	ci = commit
	cma = commit -am
	co = checkout
	br = branch
	diff = diff --word-diff
	dc = diff --cached
	r = reset
	r1 = reset HEAD^
	r2 = reset HEAD^^
	rh = reset --hard
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard
	sl = stash list
	sa = stash apply
	ss = stash save
	rmg = revert -m 1
	shorty = status --short --branch
	merc = merge --no-ff
	please = push --force-with-lease
	amend = commit --amend
	commend = commit --amend --no-edit
	it = "!git init && git commit -m 'new repo' --allow-empty"
	stsh = stash --keep-index
	staash = stash --include-untracke
	staaash = stash --all
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	resolve = "!f() { git branch --merged `git rev-parse --abbrev-ref HEAD` | grep -v '\\* develop' | xargs -n 1 git branch -d; } ; f"
	fu = "!f() { branch=`git rev-parse --abbrev-ref HEAD`; git branch --set-upstream-to=origin/$branch $branch; } ; f"
	dadd = !curl https://icanhazdadjoke.com/ && git add
	commmit-lie = "!f() { git commit -m \"`curl -fsSL http://whatthecommit.com/index.txt`\" $@; } ; f"
	wta = "!f() { git worktree add \"`git rev-parse --show-toplevel`-$1\" ${2-$1}; } ; f"
	wtb = "!f() { git worktree add \"`git rev-parse --show-toplevel`-$1\" -b ${2-$1}; } ; f"
	wtr = "!f() { git worktree remove \"`git rev-parse --show-toplevel`-$1\"; } ; f"
	wtp = worktree prune
	wtl = worktree list
	root = rev-parse --show-toplevel
        fresh = clean -fdX

[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[diff]
	tool = Kaleidoscope
[difftool]
	prompt = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[mergetool]
	prompt = false
	keepBackup = true
[merge]
	tool = Kaleidoscope
	renameLimit = 999999
[http]
[credential]
	helper = osxkeychain
[commit]
	gpgsign = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[gpg]
	program = /usr/local/bin/gpg
